import numpy as np
import torch
import torchvision
import torchvision.transforms as transforms
import torch.utils.data.dataloader
import matplotlib.pyplot as plt

#normalising the data
transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])

#Here the training data is downloaded and then loaded
trainset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=4, shuffle=True, num_workers=2)

#Here the test data is downloaded and then loaded
testset = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)                                     
testloader = torch.utils.data.DataLoader(testset, batch_size=4, shuffle=False, num_workers=2)

from keras.datasets import cifar10

#CIFAR-10 datasheet is loaded
(train_images, train_labels), (test_images, test_labels) = cifar10.load_data()
                                         
classes = ('plane', 'car', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck')                                         
def imshow(img):
    img = img / 2 + 0.5  
    npimg = img.numpy()
    plt.imshow(np.transpose(npimg, (1, 2, 0)))
    plt.show()

#random training images
dataiter = iter(trainloader)
images, labels = dataiter.__next__()

imshow(torchvision.utils.make_grid(images))
print(' '.join(f'{classes[labels[j]]:5s}' for j in range(4)))
